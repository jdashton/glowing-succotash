# frozen_string_literal: true

# IntCode with + and * opcodes
class Advent05
  def self.val(idx, offset, modes, prg_ary)
    v = prg_ary[idx + offset]
    modes[offset] ? v : prg_ary[v]
  end

  def self.calc(idx, modes, prg_ary, operation)
    val(idx, 1, modes, prg_ary)
      .send(operation, val(idx, 2, modes, prg_ary))
  end

  OPCODE_IMPLS = {
    1 => ->(p, i, m) { p[p[i + 3]] = calc(i, m, p, :+) },
    2 => ->(p, i, m) { p[p[i + 3]] = calc(i, m, p, :*) },
    3 => ->(p, i, _) { print 'INPUT: '; p[p[i + 1]] = gets.to_i },
    4 => ->(p, i, m) { puts "OUTPUT: #{ val(i, 1, m, p) }" },
    5 => ->(p, i, m) { val(i, 1, m, p).nonzero? ? val(i, 2, m, p) : i + 3 },
    6 => ->(p, i, m) { val(i, 1, m, p).zero? ? val(i, 2, m, p) : i + 3 },
    7 => ->(p, i, m) { p[p[i + 3]] = calc(i, m, p, :<) ? 1 : 0 },
    8 => ->(p, i, m) { p[p[i + 3]] = calc(i, m, p, :==) ? 1 : 0 }
  }.freeze

  OPCODES = OPCODE_IMPLS.keys

  OP_LENS = {
    1 => 4,
    2 => 4,
    3 => 2,
    4 => 2,
    5 => 3,
    6 => 3,
    7 => 4,
    8 => 4
  }.freeze

  JMP_OPS = [5, 6].freeze

  def op(opcode)
    opcode.to_s.rjust(2, ?0)[-2..].to_i
  end

  def modes(opcode)
    opcode
      .to_s
      .rjust(OP_LENS[op(opcode)] + 1, ?0)[0..-2]
      .chars
      .reverse
      .map(&:to_i)
      .map { |i| i.positive? ? i : false }
  end

  # Implement an IntCode computer
  def run(prg_ary)
    idx = 0
    while OPCODES.include?(o = op(prg_ary[idx]))
      i = OPCODE_IMPLS[o].call(prg_ary, idx, modes(prg_ary[idx]))
      idx = JMP_OPS.include?(o) ? i : idx + OP_LENS[o]
    end
    # puts prg_ary[idx] == 99 ? "HALT" : "UNEXPECTED OPCODE #{ prg_ary[idx] }"
    prg_ary
  end
end

if $PROGRAM_NAME == __FILE__
  input = <<~DOC_END
    3,225,1,225,6,6,1100,1,238,225,104,0,1102,59,58,224,1001,224,-3422,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,59,30,225,1101,53,84,224,101,-137,224,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,1102,42,83,225,2,140,88,224,1001,224,-4891,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,1101,61,67,225,101,46,62,224,1001,224,-129,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1102,53,40,225,1001,35,35,224,1001,224,-94,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,5,73,225,1002,191,52,224,1001,224,-1872,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,102,82,195,224,101,-738,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1101,83,52,225,1101,36,77,225,1101,9,10,225,1,113,187,224,1001,224,-136,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,1002,223,2,223,1006,224,329,1001,223,1,223,1108,226,226,224,102,2,223,223,1006,224,344,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,359,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,374,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,389,1001,223,1,223,1008,677,677,224,1002,223,2,223,1005,224,404,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,419,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,224,434,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,1001,223,1,223,8,226,226,224,1002,223,2,223,1006,224,479,1001,223,1,223,107,226,677,224,102,2,223,223,1005,224,494,1001,223,1,223,7,226,226,224,102,2,223,223,1005,224,509,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,524,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,539,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,554,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,569,101,1,223,223,108,226,677,224,1002,223,2,223,1006,224,584,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,614,1001,223,1,223,108,677,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,659,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226
  DOC_END
            .lines[0]
            .split(?,)
            .map(&:to_i)

  adv5 = Advent05.new
  output = adv5.run([].replace(input))
  puts output[0]
end
